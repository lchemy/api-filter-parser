// Generated from ApiFilter.g4 by ANTLR 4.6-SNAPSHOT


import { ATN } from '@lchemy/antlr4ts/atn/ATN'
import { ATNDeserializer } from '@lchemy/antlr4ts/atn/ATNDeserializer'
import { CharStream } from '@lchemy/antlr4ts/CharStream'
import { Lexer } from '@lchemy/antlr4ts/Lexer'
import { LexerATNSimulator } from '@lchemy/antlr4ts/atn/LexerATNSimulator'
import { NotNull } from '@lchemy/antlr4ts/Decorators'
import { Override } from '@lchemy/antlr4ts/Decorators'
import { RuleContext } from '@lchemy/antlr4ts/RuleContext'
import { Vocabulary } from '@lchemy/antlr4ts/Vocabulary'
import { VocabularyImpl } from '@lchemy/antlr4ts/VocabularyImpl'

import * as Utils from '@lchemy/antlr4ts/misc/Utils'


export class ApiFilterLexer extends Lexer {
	public static readonly T__0=1;
	public static readonly T__1=2;
	public static readonly T__2=3;
	public static readonly OP_NULL_CHECK=4;
	public static readonly OP_COMPARISON=5;
	public static readonly OP_LIKE=6;
	public static readonly OP_BETWEEN=7;
	public static readonly OP_IN=8;
	public static readonly OP_EXISTS=9;
	public static readonly AND=10;
	public static readonly OR=11;
	public static readonly HAVE_COUNT=12;
	public static readonly RAW=13;
	public static readonly FIELD=14;
	public static readonly STRING=15;
	public static readonly NUMBER=16;
	public static readonly SPACE=17;
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE"
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "OP_NULL_CHECK", "OP_COMPARISON", "OP_LIKE", "OP_BETWEEN", 
		"OP_IN", "OP_EXISTS", "AND", "OR", "HAVE_COUNT", "RAW", "FIELD", "FIELD_START", 
		"FIELD_CHAR", "STRING", "ESCAPED_CHAR", "NUMBER", "SIGN", "INTEGER", "DECIMAL", 
		"EXPONENT", "SPACE"
	];

	private static readonly _LITERAL_NAMES: (string | undefined)[] = [
		undefined, "'('", "','", "')'", undefined, undefined, undefined, undefined, 
		undefined, undefined, "'and'", "'or'", "'have count'"
	];
	private static readonly _SYMBOLIC_NAMES: (string | undefined)[] = [
		undefined, undefined, undefined, undefined, "OP_NULL_CHECK", "OP_COMPARISON", 
		"OP_LIKE", "OP_BETWEEN", "OP_IN", "OP_EXISTS", "AND", "OR", "HAVE_COUNT", 
		"RAW", "FIELD", "STRING", "NUMBER", "SPACE"
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(ApiFilterLexer._LITERAL_NAMES, ApiFilterLexer._SYMBOLIC_NAMES, []);

	@Override
	@NotNull
	public get vocabulary(): Vocabulary {
		return ApiFilterLexer.VOCABULARY;
	}


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(ApiFilterLexer._ATN, this);
	}

	@Override
	public get grammarFileName(): string { return "ApiFilter.g4"; }

	@Override
	public get ruleNames(): string[] { return ApiFilterLexer.ruleNames; }

	@Override
	public get serializedATN(): string { return ApiFilterLexer._serializedATN; }

	@Override
	public get modeNames(): string[] { return ApiFilterLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uAF6F\u8320\u479D\uB75C\u4880\u1605\u191C\uAB37\x02\x13\u0101\b\x01"+
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06"+
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r"+
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t"+
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t"+
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x03\x02\x03\x02\x03\x03\x03\x03\x03\x04"+
		"\x03\x04\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05"+
		"\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05"+
		"\x03\x05\x05\x05L\n\x05\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06"+
		"\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06"+
		"\x05\x06]\n\x06\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07"+
		"\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07"+
		"\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07"+
		"\x03\x07\x05\x07y\n\x07\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03"+
		"\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x05\b\x8D"+
		"\n\b\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x05\t\x97\n\t\x03"+
		"\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03"+
		"\n\x03\n\x03\n\x03\n\x05\n\xA9\n\n\x03\v\x03\v\x03\v\x03\v\x03\f\x03\f"+
		"\x03\f\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03"+
		"\r\x03\x0E\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x07\x0F\xC2\n\x0F\f\x0F\x0E"+
		"\x0F\xC5\v\x0F\x03\x10\x03\x10\x03\x11\x03\x11\x05\x11\xCB\n\x11\x03\x12"+
		"\x03\x12\x03\x12\x07\x12\xD0\n\x12\f\x12\x0E\x12\xD3\v\x12\x03\x12\x03"+
		"\x12\x03\x13\x03\x13\x03\x13\x03\x14\x05\x14\xDB\n\x14\x03\x14\x03\x14"+
		"\x05\x14\xDF\n\x14\x03\x15\x03\x15\x03\x16\x06\x16\xE4\n\x16\r\x16\x0E"+
		"\x16\xE5\x03\x17\x06\x17\xE9\n\x17\r\x17\x0E\x17\xEA\x03\x17\x03\x17\x06"+
		"\x17\xEF\n\x17\r\x17\x0E\x17\xF0\x05\x17\xF3\n\x17\x03\x18\x03\x18\x05"+
		"\x18\xF7\n\x18\x03\x18\x03\x18\x03\x19\x06\x19\xFC\n\x19\r\x19\x0E\x19"+
		"\xFD\x03\x19\x03\x19\x03\xD1\x02\x02\x1A\x03\x02\x03\x05\x02\x04\x07\x02"+
		"\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02"+
		"\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x02!\x02\x02"+
		"#\x02\x11%\x02\x02\'\x02\x12)\x02\x02+\x02\x02-\x02\x02/\x02\x021\x02"+
		"\x13\x03\x02\b\x05\x02C\\aac|\x04\x02&&00\x04\x02--//\x03\x022;\x04\x02"+
		"GGgg\x05\x02\v\f\x0F\x0F\"\"\u0111\x02\x03\x03\x02\x02\x02\x02\x05\x03"+
		"\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02"+
		"\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02"+
		"\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02"+
		"\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02"+
		"\x02\x02\x02#\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x021\x03\x02\x02\x02"+
		"\x033\x03\x02\x02\x02\x055\x03\x02\x02\x02\x077\x03\x02\x02\x02\tK\x03"+
		"\x02\x02\x02\v\\\x03\x02\x02\x02\rx\x03\x02\x02\x02\x0F\x8C\x03\x02\x02"+
		"\x02\x11\x96\x03\x02\x02\x02\x13\xA8\x03\x02\x02\x02\x15\xAA\x03\x02\x02"+
		"\x02\x17\xAE\x03\x02\x02\x02\x19\xB1\x03\x02\x02\x02\x1B\xBC\x03\x02\x02"+
		"\x02\x1D\xBF\x03\x02\x02\x02\x1F\xC6\x03\x02\x02\x02!\xCA\x03\x02\x02"+
		"\x02#\xCC\x03\x02\x02\x02%\xD6\x03\x02\x02\x02\'\xDA\x03\x02\x02\x02)"+
		"\xE0\x03\x02\x02\x02+\xE3\x03\x02\x02\x02-\xE8\x03\x02\x02\x02/\xF4\x03"+
		"\x02\x02\x021\xFB\x03\x02\x02\x0234\x07*\x02\x024\x04\x03\x02\x02\x02"+
		"56\x07.\x02\x026\x06\x03\x02\x02\x0278\x07+\x02\x028\b\x03\x02\x02\x02"+
		"9:\x07k\x02\x02:;\x07u\x02\x02;<\x07\"\x02\x02<=\x07p\x02\x02=>\x07w\x02"+
		"\x02>?\x07n\x02\x02?L\x07n\x02\x02@A\x07k\x02\x02AB\x07u\x02\x02BC\x07"+
		"\"\x02\x02CD\x07p\x02\x02DE\x07q\x02\x02EF\x07v\x02\x02FG\x07\"\x02\x02"+
		"GH\x07p\x02\x02HI\x07w\x02\x02IJ\x07n\x02\x02JL\x07n\x02\x02K9\x03\x02"+
		"\x02\x02K@\x03\x02\x02\x02L\n\x03\x02\x02\x02MN\x07g\x02\x02N]\x07s\x02"+
		"\x02OP\x07p\x02\x02PQ\x07g\x02\x02Q]\x07s\x02\x02RS\x07i\x02\x02S]\x07"+
		"v\x02\x02TU\x07i\x02\x02UV\x07v\x02\x02V]\x07g\x02\x02WX\x07n\x02\x02"+
		"X]\x07v\x02\x02YZ\x07n\x02\x02Z[\x07v\x02\x02[]\x07g\x02\x02\\M\x03\x02"+
		"\x02\x02\\O\x03\x02\x02\x02\\R\x03\x02\x02\x02\\T\x03\x02\x02\x02\\W\x03"+
		"\x02\x02\x02\\Y\x03\x02\x02\x02]\f\x03\x02\x02\x02^_\x07n\x02\x02_`\x07"+
		"k\x02\x02`a\x07m\x02\x02ay\x07g\x02\x02bc\x07p\x02\x02cd\x07q\x02\x02"+
		"de\x07v\x02\x02ef\x07\"\x02\x02fg\x07n\x02\x02gh\x07k\x02\x02hi\x07m\x02"+
		"\x02iy\x07g\x02\x02jk\x07k\x02\x02kl\x07n\x02\x02lm\x07k\x02\x02mn\x07"+
		"m\x02\x02ny\x07g\x02\x02op\x07p\x02\x02pq\x07q\x02\x02qr\x07v\x02\x02"+
		"rs\x07\"\x02\x02st\x07k\x02\x02tu\x07n\x02\x02uv\x07k\x02\x02vw\x07m\x02"+
		"\x02wy\x07g\x02\x02x^\x03\x02\x02\x02xb\x03\x02\x02\x02xj\x03\x02\x02"+
		"\x02xo\x03\x02\x02\x02y\x0E\x03\x02\x02\x02z{\x07d\x02\x02{|\x07g\x02"+
		"\x02|}\x07v\x02\x02}~\x07y\x02\x02~\x7F\x07g\x02\x02\x7F\x80\x07g\x02"+
		"\x02\x80\x8D\x07p\x02\x02\x81\x82\x07p\x02\x02\x82\x83\x07q\x02\x02\x83"+
		"\x84\x07v\x02\x02\x84\x85\x07\"\x02\x02\x85\x86\x07d\x02\x02\x86\x87\x07"+
		"g\x02\x02\x87\x88\x07v\x02\x02\x88\x89\x07y\x02\x02\x89\x8A\x07g\x02\x02"+
		"\x8A\x8B\x07g\x02\x02\x8B\x8D\x07p\x02\x02\x8Cz\x03\x02\x02\x02\x8C\x81"+
		"\x03\x02\x02\x02\x8D\x10\x03\x02\x02\x02\x8E\x8F\x07k\x02\x02\x8F\x97"+
		"\x07p\x02\x02\x90\x91\x07p\x02\x02\x91\x92\x07q\x02\x02\x92\x93\x07v\x02"+
		"\x02\x93\x94\x07\"\x02\x02\x94\x95\x07k\x02\x02\x95\x97\x07p\x02\x02\x96"+
		"\x8E\x03\x02\x02\x02\x96\x90\x03\x02\x02\x02\x97\x12\x03\x02\x02\x02\x98"+
		"\x99\x07g\x02\x02\x99\x9A\x07z\x02\x02\x9A\x9B\x07k\x02\x02\x9B\x9C\x07"+
		"u\x02\x02\x9C\x9D\x07v\x02\x02\x9D\xA9\x07u\x02\x02\x9E\x9F\x07p\x02\x02"+
		"\x9F\xA0\x07q\x02\x02\xA0\xA1\x07v\x02\x02\xA1\xA2\x07\"\x02\x02\xA2\xA3"+
		"\x07g\x02\x02\xA3\xA4\x07z\x02\x02\xA4\xA5\x07k\x02\x02\xA5\xA6\x07u\x02"+
		"\x02\xA6\xA7\x07v\x02\x02\xA7\xA9\x07u\x02\x02\xA8\x98\x03\x02\x02\x02"+
		"\xA8\x9E\x03\x02\x02\x02\xA9\x14\x03\x02\x02\x02\xAA\xAB\x07c\x02\x02"+
		"\xAB\xAC\x07p\x02\x02\xAC\xAD\x07f\x02\x02\xAD\x16\x03\x02\x02\x02\xAE"+
		"\xAF\x07q\x02\x02\xAF\xB0\x07t\x02\x02\xB0\x18\x03\x02\x02\x02\xB1\xB2"+
		"\x07j\x02\x02\xB2\xB3\x07c\x02\x02\xB3\xB4\x07x\x02\x02\xB4\xB5\x07g\x02"+
		"\x02\xB5\xB6\x07\"\x02\x02\xB6\xB7\x07e\x02\x02\xB7\xB8\x07q\x02\x02\xB8"+
		"\xB9\x07w\x02\x02\xB9\xBA\x07p\x02\x02\xBA\xBB\x07v\x02\x02\xBB\x1A\x03"+
		"\x02\x02\x02\xBC\xBD\x07&\x02\x02\xBD\xBE\x05\x1D\x0F\x02\xBE\x1C\x03"+
		"\x02\x02\x02\xBF\xC3\x05\x1F\x10\x02\xC0\xC2\x05!\x11\x02\xC1\xC0\x03"+
		"\x02\x02\x02\xC2\xC5\x03\x02\x02\x02\xC3\xC1\x03\x02\x02\x02\xC3\xC4\x03"+
		"\x02\x02\x02\xC4\x1E\x03\x02\x02\x02\xC5\xC3\x03\x02\x02\x02\xC6\xC7\t"+
		"\x02\x02\x02\xC7 \x03\x02\x02\x02\xC8\xCB\x05\x1F\x10\x02\xC9\xCB\t\x03"+
		"\x02\x02\xCA\xC8\x03\x02\x02\x02\xCA\xC9\x03\x02\x02\x02\xCB\"\x03\x02"+
		"\x02\x02\xCC\xD1\x07$\x02\x02\xCD\xD0\x05%\x13\x02\xCE\xD0\v\x02\x02\x02"+
		"\xCF\xCD\x03\x02\x02\x02\xCF\xCE\x03\x02\x02\x02\xD0\xD3\x03\x02\x02\x02"+
		"\xD1\xD2\x03\x02\x02\x02\xD1\xCF\x03\x02\x02\x02\xD2\xD4\x03\x02\x02\x02"+
		"\xD3\xD1\x03\x02\x02\x02\xD4\xD5\x07$\x02\x02\xD5$\x03\x02\x02\x02\xD6"+
		"\xD7\x07^\x02\x02\xD7\xD8\v\x02\x02\x02\xD8&\x03\x02\x02\x02\xD9\xDB\x05"+
		")\x15\x02\xDA\xD9\x03\x02\x02\x02\xDA\xDB\x03\x02\x02\x02\xDB\xDC\x03"+
		"\x02\x02\x02\xDC\xDE\x05-\x17\x02\xDD\xDF\x05/\x18\x02\xDE\xDD\x03\x02"+
		"\x02\x02\xDE\xDF\x03\x02\x02\x02\xDF(\x03\x02\x02\x02\xE0\xE1\t\x04\x02"+
		"\x02\xE1*\x03\x02\x02\x02\xE2\xE4\t\x05\x02\x02\xE3\xE2\x03\x02\x02\x02"+
		"\xE4\xE5\x03\x02\x02\x02\xE5\xE3\x03\x02\x02\x02\xE5\xE6\x03\x02\x02\x02"+
		"\xE6,\x03\x02\x02\x02\xE7\xE9\x05+\x16\x02\xE8\xE7\x03\x02\x02\x02\xE9"+
		"\xEA\x03\x02\x02\x02\xEA\xE8\x03\x02\x02\x02\xEA\xEB\x03\x02\x02\x02\xEB"+
		"\xF2\x03\x02\x02\x02\xEC\xEE\x070\x02\x02\xED\xEF\x05+\x16\x02\xEE\xED"+
		"\x03\x02\x02\x02\xEF\xF0\x03\x02\x02\x02\xF0\xEE\x03\x02\x02\x02\xF0\xF1"+
		"\x03\x02\x02\x02\xF1\xF3\x03\x02\x02\x02\xF2\xEC\x03\x02\x02\x02\xF2\xF3"+
		"\x03\x02\x02\x02\xF3.\x03\x02\x02\x02\xF4\xF6\t\x06\x02\x02\xF5\xF7\x05"+
		")\x15\x02\xF6\xF5\x03\x02\x02\x02\xF6\xF7\x03\x02\x02\x02\xF7\xF8\x03"+
		"\x02\x02\x02\xF8\xF9\x05+\x16\x02\xF90\x03\x02\x02\x02\xFA\xFC\t\x07\x02"+
		"\x02\xFB\xFA\x03\x02\x02\x02\xFC\xFD\x03\x02\x02\x02\xFD\xFB\x03\x02\x02"+
		"\x02\xFD\xFE\x03\x02\x02\x02\xFE\xFF\x03\x02\x02\x02\xFF\u0100\b\x19\x02"+
		"\x02\u01002\x03\x02\x02\x02\x15\x02K\\x\x8C\x96\xA8\xC3\xCA\xCF\xD1\xDA"+
		"\xDE\xE5\xEA\xF0\xF2\xF6\xFD\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!ApiFilterLexer.__ATN) {
			ApiFilterLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(ApiFilterLexer._serializedATN));
		}

		return ApiFilterLexer.__ATN;
	}

}

